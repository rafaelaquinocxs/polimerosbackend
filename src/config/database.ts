import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const connectDB = async (): Promise<void> => {
  try {
    // Usar MONGO_URI como vari√°vel principal, com fallbacks
    const mongoURI = process.env.MONGO_URI || 
                     process.env.MONGODB_URI || 
                     'mongodb://localhost:27017/polymer-order-flow';
    
    console.log('üîÑ Tentando conectar ao MongoDB...');
    
    // Configura√ß√µes otimizadas para MongoDB Atlas
    await mongoose.connect(mongoURI, {
      serverSelectionTimeoutMS: 10000, // 10 segundos para Atlas
      socketTimeoutMS: 45000,
      bufferCommands: false,
      maxPoolSize: 10,
      minPoolSize: 5,
      maxIdleTimeMS: 30000,
      // Configura√ß√µes espec√≠ficas para Atlas
      retryWrites: true,
      w: 'majority'
    });
    
    console.log('‚úÖ MongoDB conectado com sucesso');
    console.log(`üìç Conectado ao MongoDB Atlas`);
  } catch (error) {
    console.error('‚ùå Falha na conex√£o com MongoDB');
    console.error('üí° Dicas para resolver:');
    console.error('   - Verifique se a URI do MongoDB Atlas est√° correta');
    console.error('   - Confirme se o usu√°rio e senha est√£o corretos');
    console.error('   - Verifique se o IP est√° liberado no MongoDB Atlas');
    console.error('   - Configure MONGO_URI no arquivo .env');
    console.error('   - Exemplo: MONGO_URI=mongodb+srv://user:pass@cluster.mongodb.net/dbname');
    
    // Log do erro t√©cnico apenas em desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      console.error('üîß Erro t√©cnico:', (error as Error).message);
    }
    
    // N√£o encerrar o processo, permitir que o servidor continue rodando
    console.warn('‚ö†Ô∏è  Servidor continuar√° rodando sem conex√£o com o banco de dados');
  }
};

// Eventos de conex√£o do Mongoose
mongoose.connection.on('connected', () => {
  console.log('üîó Mongoose conectado ao MongoDB Atlas');
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå Erro na conex√£o do Mongoose:', err.message);
});

mongoose.connection.on('disconnected', () => {
  console.log('üîå Mongoose desconectado do MongoDB');
});

mongoose.connection.on('reconnected', () => {
  console.log('üîÑ Mongoose reconectado ao MongoDB');
});

// Graceful shutdown
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('üõë Conex√£o MongoDB fechada devido ao encerramento da aplica√ß√£o');
  } catch (error) {
    console.error('‚ùå Erro ao fechar conex√£o:', (error as Error).message);
  }
  process.exit(0);
});

export default connectDB;