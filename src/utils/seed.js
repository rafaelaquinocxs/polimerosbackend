const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Schema do usu√°rio (copiado exatamente do sistema)
const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Nome √© obrigat√≥rio'],
    trim: true,
    maxlength: [100, 'Nome n√£o pode ter mais de 100 caracteres']
  },
  email: {
    type: String,
    required: [true, 'Email √© obrigat√≥rio'],
    unique: true,
    lowercase: true,
    trim: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Email inv√°lido']
  },
  password: {
    type: String,
    required: [true, 'Senha √© obrigat√≥ria'],
    minlength: [6, 'Senha deve ter pelo menos 6 caracteres']
  }
}, {
  timestamps: true
});

// Hash da senha antes de salvar
UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  try {
    const salt = await bcrypt.genSalt(12);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

const User = mongoose.model('User', UserSchema);

const createUser = async () => {
  try {
    // Conectar ao banco
    const mongoURI = process.env.MONGO_URI || 
                     process.env.MONGODB_URI || 
                     'mongodb://localhost:27017/polymer-order-flow';
    
    console.log('üîÑ Conectando ao MongoDB...');
    await mongoose.connect(mongoURI);
    console.log('‚úÖ Conectado ao MongoDB');

    // Remover usu√°rio existente se houver
    await User.deleteOne({ email: 'admin@polimeros.com' });
    console.log('üßπ Usu√°rio existente removido (se havia)');

    // Criar novo usu√°rio
    console.log('üë§ Criando usu√°rio administrador...');
    
    const userData = {
      name: 'Administrador do Sistema',
      email: 'admin@polimeros.com',
      password: 'Polimeros@2024'
    };

    const user = new User(userData);
    await user.save();
    
    console.log('‚úÖ Usu√°rio criado com sucesso!');
    console.log('');
    console.log('üîê CREDENCIAIS PARA LOGIN:');
    console.log('üìß Email: admin@polimeros.com');
    console.log('üîë Senha: Polimeros@2024');
    console.log('');

    // Verificar se foi salvo corretamente
    const savedUser = await User.findOne({ email: 'admin@polimeros.com' });
    if (savedUser) {
      console.log('‚úÖ Verifica√ß√£o: Usu√°rio encontrado no banco');
      console.log(`   Nome: ${savedUser.name}`);
      console.log(`   Email: ${savedUser.email}`);
      
      // Testar senha
      const isValidPassword = await bcrypt.compare('Polimeros@2024', savedUser.password);
      console.log(`   Senha v√°lida: ${isValidPassword ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    } else {
      console.log('‚ùå Erro: Usu√°rio n√£o foi encontrado ap√≥s cria√ß√£o!');
    }

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error);
    process.exit(1);
  }
};

createUser();